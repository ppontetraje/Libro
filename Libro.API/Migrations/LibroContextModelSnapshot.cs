// <auto-generated />
using System;
using Libro.API.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Libro.API.Migrations
{
    [DbContext(typeof(LibroContext))]
    partial class LibroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.14");

            modelBuilder.Entity("Libro.API.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Latitud")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Longitud")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ubigeo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRegistered = new DateTime(2023, 2, 17, 21, 54, 30, 709, DateTimeKind.Local).AddTicks(6566),
                            Description = "Calle Alberto Arispe 131",
                            Latitud = 0m,
                            Longitud = 0m,
                            Reference = "A media cuadra del óvalo",
                            Status = true,
                            Ubigeo = "010101"
                        },
                        new
                        {
                            Id = 2,
                            DateRegistered = new DateTime(2023, 2, 17, 21, 54, 30, 709, DateTimeKind.Local).AddTicks(6569),
                            Description = "Calle Las fresias",
                            Latitud = 0m,
                            Longitud = 0m,
                            Reference = "A media cuadra de la comisaria",
                            Status = true,
                            Ubigeo = "010102"
                        },
                        new
                        {
                            Id = 3,
                            DateRegistered = new DateTime(2023, 2, 17, 21, 54, 30, 709, DateTimeKind.Local).AddTicks(6571),
                            Description = "Av. Paz Soldán 203",
                            Latitud = 0m,
                            Longitud = 0m,
                            Reference = "A un costado del Hospital de la mujer",
                            Status = true,
                            Ubigeo = "010101"
                        },
                        new
                        {
                            Id = 4,
                            DateRegistered = new DateTime(2023, 2, 17, 21, 54, 30, 709, DateTimeKind.Local).AddTicks(6572),
                            Description = "Av. Independencia 304",
                            Latitud = 0m,
                            Longitud = 0m,
                            Reference = "Intersección con la calle Victor Lira",
                            Status = true,
                            Ubigeo = "010102"
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgencyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Agencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgencyType = 0,
                            Name = "La Joya",
                            PersonId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            AgencyType = 1,
                            Name = "Independencia",
                            PersonId = 2,
                            Status = true
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.AgencyAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgencyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Current")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyId");

                    b.ToTable("AgencyAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            AgencyId = 1,
                            Current = true
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 4,
                            AgencyId = 2,
                            Current = false
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgencyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ClaimedAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("PersonId");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgencyId = 1,
                            ClaimedAmount = 120m,
                            Description = "La mercadería llegó rota",
                            PersonId = 3,
                            Request = "Reparación de la mercadería",
                            Response = ""
                        },
                        new
                        {
                            Id = 2,
                            AgencyId = 2,
                            ClaimedAmount = 40m,
                            Description = "El envío se realizó desde Arequipa hacia la joya, la mercadería aún no llega",
                            PersonId = 3,
                            Request = "Devolución del dinero invertido en el traslado",
                            Response = ""
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSerie")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SunatCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acronym = "DNI",
                            DocumentTypeId = 1,
                            HasSerie = false,
                            Name = "Documento Nacional de Identidad",
                            SunatCode = "01"
                        },
                        new
                        {
                            Id = 2,
                            Acronym = "RUC",
                            DocumentTypeId = 1,
                            HasSerie = false,
                            Name = "Registro Unico del Contribuyente",
                            SunatCode = "02"
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comercial"
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<char>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1995, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 'M',
                            LastName = "Palomino",
                            Name = "Jean"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2007, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 'F',
                            LastName = "Palomino",
                            Name = "Melissa"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1995, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 'M',
                            LastName = "Quispe",
                            Name = "Edson"
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.PersonAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFiscal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            IsFiscal = true,
                            PersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            IsFiscal = false,
                            PersonId = 2
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.PersonDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonDocuments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DocumentId = 1,
                            Number = "71942776",
                            PersonId = 1,
                            Serie = ""
                        },
                        new
                        {
                            Id = 2,
                            DocumentId = 1,
                            Number = "81748596",
                            PersonId = 2,
                            Serie = ""
                        },
                        new
                        {
                            Id = 3,
                            DocumentId = 1,
                            Number = "71942774",
                            PersonId = 3,
                            Serie = ""
                        });
                });

            modelBuilder.Entity("Libro.API.Entities.Agency", b =>
                {
                    b.HasOne("Libro.API.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Libro.API.Entities.AgencyAddress", b =>
                {
                    b.HasOne("Libro.API.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Libro.API.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Libro.API.Entities.Claim", b =>
                {
                    b.HasOne("Libro.API.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Libro.API.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Libro.API.Entities.Document", b =>
                {
                    b.HasOne("Libro.API.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Libro.API.Entities.PersonAddress", b =>
                {
                    b.HasOne("Libro.API.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Libro.API.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Libro.API.Entities.PersonDocument", b =>
                {
                    b.HasOne("Libro.API.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Libro.API.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
